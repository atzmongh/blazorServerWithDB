@using blazorServerWithDB.Data
@using blazorServerWithDB.Models
@inject ITodoService todoService

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.Small">
        <ModalHeader>
            <ModalTitle>@addOrEdit Todo</ModalTitle>
            <CloseButton Clicked="@HideModal" />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validationsRef" Mode="ValidationMode.Auto"  ValidateOnLoad="false">
                <Validation Validator="@IsRequired">
                    <Field>
                        <FieldLabel>Description</FieldLabel>
                        <TextEdit @bind-Text="aTodo.Description" Placeholder="Enter todo description">
                            <Feedback>
                                <ValidationError>Please enter a good description</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Field>
                    <FieldLabel>Status</FieldLabel>
                    <Select TValue="string" @bind-SelectedValue="aTodo.Status">
                        @foreach(string aStatus in Todoes.statusList)
                        {
                            <SelectItem Value="@aStatus">@aStatus</SelectItem>
                        }
                    </Select>
                </Field>
                <Validation Validator="@ValidDueDate">
                    <Field>
                        <FieldLabel>Due Date</FieldLabel>
                        <DateEdit TValue="DateTime?" @bind-Date="aTodo.DueDate">
                            <Feedback>
                                <ValidationError>Due date cannot be in the past</ValidationError>
                            </Feedback>
                        </DateEdit>
                    </Field>
                </Validation>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@AddEditCancelled">Cancel</Button>
            @if (addOrEdit == "add")
            {
                <Button Color="Color.Primary" Clicked="@TodoAdded">Add Todo</Button>
            }
            else
            {
                <Button Color="Color.Primary" Clicked="@TodoEdited">Update Todo</Button>
            }

        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal modalRef;
    private Validations validationsRef;
    [Parameter]
    public bool showForm
    {
        set
        {
            if (value == true)
            {
                modalRef.Show();
                validationsRef.ValidateAll();   //This is required for the next time we are using the Modal form - 
                                                //without it the validators remained in the "valid" status.

            }
        }
    }
    [Parameter]
    public Action ModalFormFinished { get; set; }

    [Parameter]
    public Todoes aTodo
    {
        get; set;

    }
    [Parameter]
    public Todoes originalTodo
    {
        get;set;
    }


    [Parameter]
    public string addOrEdit { get; set; }

    public void HideModal()
    {
        modalRef.Hide();
        ModalFormFinished();
    }

    public void TodoAdded()
    {
        if (validationsRef.ValidateAll())
        {
            todoService.AddTodo(aTodo);
            aTodo.Description = "";
            this.HideModal();

        }
    }


    public void TodoEdited()
    {
        if (validationsRef.ValidateAll())
        {
            todoService.EditTodo(aTodo);
            this.HideModal();
        }

    }
    public void AddEditCancelled()
    {
        originalTodo.Update(aTodo);  //return original value to todo
        HideModal();
    }
    public void ValidDueDate(ValidatorEventArgs e)
    {
        e.Status = aTodo.DueDate < DateTime.Today ?
            ValidationStatus.Error : ValidationStatus.Success;
    }
    public void IsRequired(ValidatorEventArgs e)
    {
        e.Status = String.IsNullOrEmpty(aTodo.Description) ?
            ValidationStatus.Error : ValidationStatus.Success;
    }
}
