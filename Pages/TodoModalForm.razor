@using blazorServerWithDB.Data
@using blazorServerWithDB.Models
@inject ITodoService todoService

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>@addOrEdit Todo</ModalTitle>
            <CloseButton Clicked="@HideModal" />
        </ModalHeader>
        <ModalBody>
            <Validations Mode="ValidationMode.Auto"  ValidateOnLoad="true">
                <Validation Validator="@ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Description</FieldLabel>
                        <TextEdit @bind-Text="aTodo.Description" Placeholder="Enter todo description">
                            <Feedback>
                                <ValidationError>Please enter a good description</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Field>
                    <FieldLabel></FieldLabel>
                    <TextEdit Placeholder="Enter surname..." />
                </Field>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Cancel</Button>
            @if (addOrEdit == "add")
            {
                <Button Color="Color.Primary" Clicked="@TodoAdded">Add Todo</Button>
            }
            else
            {
                <Button Color="Color.Primary" Clicked="@TodoEdited">Update Todo</Button>
            }

        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal modalRef = new Modal();
    [Parameter]
    public bool showForm
    {

        set
        {
            if (value == true)
            {
                modalRef = new Modal();
                modalRef.Show();
            }


        }
    }
    [Parameter]
    public Func<Task> ModalFormFinished { get; set; }

    [Parameter]
    public Todoes aTodo
    {
        get; set;

    }


    [Parameter]
    public string addOrEdit { get; set; }

    public void HideModal()
    {
        modalRef.Hide();
        ModalFormFinished();
    }

    public void TodoAdded()
    {
        if (aTodo.Description == "")
        {

        }
        todoService.AddTodo(aTodo);
        this.HideModal();
    }


    public void TodoEdited()
    {
        todoService.EditTodo(aTodo);
        this.HideModal();
    }

    public void Required(ValidatorEventArgs e)
    {
        string desc = e.Value == null ? "" : e.Value.ToString();
        if (desc == "")
        {
            e.Status = ValidationStatus.None;
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }


}
